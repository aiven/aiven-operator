name: tests

on:
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch: {}

jobs:
  setup_aiven_project_suffix:
    runs-on: ubuntu-latest
    outputs:
      project_name_suffix: ${{ steps.selproj.outputs.project_name_suffix }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - run: make selproj

      - id: selproj
        run: echo "project_name_suffix=$(make -s ci-selproj | tr -d '\n')" >> $GITHUB_OUTPUT
        env:
          AIVEN_TOKEN: ${{ secrets.AIVEN_TOKEN }}
          AIVEN_PROJECT_NAME_PREFIX: ${{ secrets.AIVEN_PROJECT_NAME_PREFIX }}

  find_tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find_tests.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - id: find_tests
        run: |
          echo "matrix=$(grep -r '^//go:build' tests/ | cut -d' ' -f2- | tr ' ' '\n' | grep -v '!' | grep -v 'suite' | sort -u | jq -cnR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT

  test:
    needs: [setup_aiven_project_suffix, find_tests]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        name: ${{ fromJson(needs.find_tests.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: make test-tag tag=${{ matrix.name }}
        env:
          AIVEN_TOKEN: ${{ secrets.AIVEN_TOKEN }}
          AIVEN_ACCOUNT_ID: ${{ secrets.AIVEN_ACCOUNT_ID }}
          AIVEN_PROJECT_NAME: >-
            ${{ secrets.AIVEN_PROJECT_NAME_PREFIX }}${{ needs.setup_aiven_project_suffix.outputs.project_name_suffix }}

  sweep:
    if: always()
    needs: [setup_aiven_project_suffix, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: make sweep
        env:
          AIVEN_TOKEN: ${{ secrets.AIVEN_TOKEN }}
          AIVEN_ACCOUNT_ID: ${{ secrets.AIVEN_ACCOUNT_ID }}
          AIVEN_PROJECT_NAME: >-
            ${{ secrets.AIVEN_PROJECT_NAME_PREFIX }}${{ needs.setup_aiven_project_suffix.outputs.project_name_suffix }}

  notify-slack-success:
    if: needs.test.result == 'success'
    needs: [test, sweep]
    uses: ./.github/workflows/slack-notify.yml
    with:
      status: success
      workflow_name: tests
      custom_message: All acceptance tests passed
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}

  notify-slack-failure:
    if: needs.test.result == 'failure'
    needs: [test, sweep]
    uses: ./.github/workflows/slack-notify.yml
    with:
      status: failure
      workflow_name: tests
      custom_message: Acceptance tests failed
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}

# Default values for aiven-operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

nameOverride: ""
fullnameOverride: ""
metricsBindAddress: ""
healthProbeBindAddress: ""
leaderElect: true

# Default Aiven Token Secret
# Configure a single Aiven API token that can be used by all resources.
# This eliminates the need to create token secrets in every namespace.
#
# Usage:
# 1. Create a secret with your Aiven API token in the operator's namespace:
#    kubectl create secret generic aiven-token --from-literal=token=<your-aiven-api-token>
# 2. Set the secret name below:
#    defaultTokenSecret:
#      name: "aiven-token"
#      key: "token"
# 3. Resources without authSecretRef will use this token
#
# Security Note: The operator needs RBAC permissions to read this secret.
# The secret should be in the same namespace as the operator deployment.
defaultTokenSecret:
  name: "" # Example: "aiven-token"
  key: token # Secret key containing the Aiven API token

# webhhook configuration
webhooks:
  enabled: true
  checkCapabilities: true
  servicePort: 443
  # Set 10250 for GKE, default is 9443
  # containerPort: 9443

# generic deployment configurations
image:
  repository: aivenoy/aiven-operator
  pullPolicy: IfNotPresent
  # default is .Chart.AppVersion but can be overridden here
  tag: ""

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

podAnnotations: {}

podSecurityContext: {}
  # runAsNonRoot: true
  # runAsUser: 65532

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # allowPrivilegeEscalation: false

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

clusterRole:
  create: true

# if empty, the operator will watch for resources in all namespaces
# regardless of this setting, the operator will always watch for resources in its own namespace
watchedNamespaces: []

# logging configuration
logging:
  # Log level for the operator (debug, info, error)
  # If not set, the operator will use its default logging configuration
  level: ""

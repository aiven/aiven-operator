//go:build !ignore_autogenerated

// Copyright (c) 2024 Aiven, Helsinki, Finland. https://aiven.io/

// Code generated by controller-gen. DO NOT EDIT.

package clickhousekafkauserconfig

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseKafkaUserConfig) DeepCopyInto(out *ClickhouseKafkaUserConfig) {
	*out = *in
	if in.Tables != nil {
		in, out := &in.Tables, &out.Tables
		*out = make([]*Tables, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Tables)
				(*in).DeepCopyInto(*out)
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseKafkaUserConfig.
func (in *ClickhouseKafkaUserConfig) DeepCopy() *ClickhouseKafkaUserConfig {
	if in == nil {
		return nil
	}
	out := new(ClickhouseKafkaUserConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Columns) DeepCopyInto(out *Columns) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Columns.
func (in *Columns) DeepCopy() *Columns {
	if in == nil {
		return nil
	}
	out := new(Columns)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Tables) DeepCopyInto(out *Tables) {
	*out = *in
	if in.AutoOffsetReset != nil {
		in, out := &in.AutoOffsetReset, &out.AutoOffsetReset
		*out = new(string)
		**out = **in
	}
	if in.Columns != nil {
		in, out := &in.Columns, &out.Columns
		*out = make([]*Columns, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Columns)
				**out = **in
			}
		}
	}
	if in.DateTimeInputFormat != nil {
		in, out := &in.DateTimeInputFormat, &out.DateTimeInputFormat
		*out = new(string)
		**out = **in
	}
	if in.HandleErrorMode != nil {
		in, out := &in.HandleErrorMode, &out.HandleErrorMode
		*out = new(string)
		**out = **in
	}
	if in.MaxBlockSize != nil {
		in, out := &in.MaxBlockSize, &out.MaxBlockSize
		*out = new(int)
		**out = **in
	}
	if in.MaxRowsPerMessage != nil {
		in, out := &in.MaxRowsPerMessage, &out.MaxRowsPerMessage
		*out = new(int)
		**out = **in
	}
	if in.NumConsumers != nil {
		in, out := &in.NumConsumers, &out.NumConsumers
		*out = new(int)
		**out = **in
	}
	if in.PollMaxBatchSize != nil {
		in, out := &in.PollMaxBatchSize, &out.PollMaxBatchSize
		*out = new(int)
		**out = **in
	}
	if in.PollMaxTimeoutMs != nil {
		in, out := &in.PollMaxTimeoutMs, &out.PollMaxTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.ProducerBatchNumMessages != nil {
		in, out := &in.ProducerBatchNumMessages, &out.ProducerBatchNumMessages
		*out = new(int)
		**out = **in
	}
	if in.ProducerBatchSize != nil {
		in, out := &in.ProducerBatchSize, &out.ProducerBatchSize
		*out = new(int)
		**out = **in
	}
	if in.ProducerCompressionCodec != nil {
		in, out := &in.ProducerCompressionCodec, &out.ProducerCompressionCodec
		*out = new(string)
		**out = **in
	}
	if in.ProducerCompressionLevel != nil {
		in, out := &in.ProducerCompressionLevel, &out.ProducerCompressionLevel
		*out = new(int)
		**out = **in
	}
	if in.ProducerLingerMs != nil {
		in, out := &in.ProducerLingerMs, &out.ProducerLingerMs
		*out = new(int)
		**out = **in
	}
	if in.ProducerQueueBufferingMaxKbytes != nil {
		in, out := &in.ProducerQueueBufferingMaxKbytes, &out.ProducerQueueBufferingMaxKbytes
		*out = new(int)
		**out = **in
	}
	if in.ProducerQueueBufferingMaxMessages != nil {
		in, out := &in.ProducerQueueBufferingMaxMessages, &out.ProducerQueueBufferingMaxMessages
		*out = new(int)
		**out = **in
	}
	if in.ProducerRequestRequiredAcks != nil {
		in, out := &in.ProducerRequestRequiredAcks, &out.ProducerRequestRequiredAcks
		*out = new(int)
		**out = **in
	}
	if in.SkipBrokenMessages != nil {
		in, out := &in.SkipBrokenMessages, &out.SkipBrokenMessages
		*out = new(int)
		**out = **in
	}
	if in.ThreadPerConsumer != nil {
		in, out := &in.ThreadPerConsumer, &out.ThreadPerConsumer
		*out = new(bool)
		**out = **in
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = make([]*Topics, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Topics)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tables.
func (in *Tables) DeepCopy() *Tables {
	if in == nil {
		return nil
	}
	out := new(Tables)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Topics) DeepCopyInto(out *Topics) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Topics.
func (in *Topics) DeepCopy() *Topics {
	if in == nil {
		return nil
	}
	out := new(Topics)
	in.DeepCopyInto(out)
	return out
}

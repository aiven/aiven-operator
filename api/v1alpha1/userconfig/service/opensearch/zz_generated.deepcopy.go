//go:build !ignore_autogenerated

// Copyright (c) 2024 Aiven, Helsinki, Finland. https://aiven.io/

// Code generated by controller-gen. DO NOT EDIT.

package opensearchuserconfig

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthFailureListeners) DeepCopyInto(out *AuthFailureListeners) {
	*out = *in
	if in.InternalAuthenticationBackendLimiting != nil {
		in, out := &in.InternalAuthenticationBackendLimiting, &out.InternalAuthenticationBackendLimiting
		*out = new(InternalAuthenticationBackendLimiting)
		(*in).DeepCopyInto(*out)
	}
	if in.IpRateLimiting != nil {
		in, out := &in.IpRateLimiting, &out.IpRateLimiting
		*out = new(IpRateLimiting)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthFailureListeners.
func (in *AuthFailureListeners) DeepCopy() *AuthFailureListeners {
	if in == nil {
		return nil
	}
	out := new(AuthFailureListeners)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureMigration) DeepCopyInto(out *AzureMigration) {
	*out = *in
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.EndpointSuffix != nil {
		in, out := &in.EndpointSuffix, &out.EndpointSuffix
		*out = new(string)
		**out = **in
	}
	if in.IncludeAliases != nil {
		in, out := &in.IncludeAliases, &out.IncludeAliases
		*out = new(bool)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Readonly != nil {
		in, out := &in.Readonly, &out.Readonly
		*out = new(bool)
		**out = **in
	}
	if in.RestoreGlobalState != nil {
		in, out := &in.RestoreGlobalState, &out.RestoreGlobalState
		*out = new(bool)
		**out = **in
	}
	if in.SasToken != nil {
		in, out := &in.SasToken, &out.SasToken
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureMigration.
func (in *AzureMigration) DeepCopy() *AzureMigration {
	if in == nil {
		return nil
	}
	out := new(AzureMigration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterRemoteStore) DeepCopyInto(out *ClusterRemoteStore) {
	*out = *in
	if in.StateGlobalMetadataUploadTimeout != nil {
		in, out := &in.StateGlobalMetadataUploadTimeout, &out.StateGlobalMetadataUploadTimeout
		*out = new(string)
		**out = **in
	}
	if in.StateMetadataManifestUploadTimeout != nil {
		in, out := &in.StateMetadataManifestUploadTimeout, &out.StateMetadataManifestUploadTimeout
		*out = new(string)
		**out = **in
	}
	if in.TranslogBufferInterval != nil {
		in, out := &in.TranslogBufferInterval, &out.TranslogBufferInterval
		*out = new(string)
		**out = **in
	}
	if in.TranslogMaxReaders != nil {
		in, out := &in.TranslogMaxReaders, &out.TranslogMaxReaders
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterRemoteStore.
func (in *ClusterRemoteStore) DeepCopy() *ClusterRemoteStore {
	if in == nil {
		return nil
	}
	out := new(ClusterRemoteStore)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterSearchRequestSlowlog) DeepCopyInto(out *ClusterSearchRequestSlowlog) {
	*out = *in
	if in.Level != nil {
		in, out := &in.Level, &out.Level
		*out = new(string)
		**out = **in
	}
	if in.Threshold != nil {
		in, out := &in.Threshold, &out.Threshold
		*out = new(Threshold)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterSearchRequestSlowlog.
func (in *ClusterSearchRequestSlowlog) DeepCopy() *ClusterSearchRequestSlowlog {
	if in == nil {
		return nil
	}
	out := new(ClusterSearchRequestSlowlog)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Cpu) DeepCopyInto(out *Cpu) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.TopNSize != nil {
		in, out := &in.TopNSize, &out.TopNSize
		*out = new(int)
		**out = **in
	}
	if in.WindowSize != nil {
		in, out := &in.WindowSize, &out.WindowSize
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Cpu.
func (in *Cpu) DeepCopy() *Cpu {
	if in == nil {
		return nil
	}
	out := new(Cpu)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiskWatermarks) DeepCopyInto(out *DiskWatermarks) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiskWatermarks.
func (in *DiskWatermarks) DeepCopy() *DiskWatermarks {
	if in == nil {
		return nil
	}
	out := new(DiskWatermarks)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GcsMigration) DeepCopyInto(out *GcsMigration) {
	*out = *in
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.IncludeAliases != nil {
		in, out := &in.IncludeAliases, &out.IncludeAliases
		*out = new(bool)
		**out = **in
	}
	if in.Readonly != nil {
		in, out := &in.Readonly, &out.Readonly
		*out = new(bool)
		**out = **in
	}
	if in.RestoreGlobalState != nil {
		in, out := &in.RestoreGlobalState, &out.RestoreGlobalState
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GcsMigration.
func (in *GcsMigration) DeepCopy() *GcsMigration {
	if in == nil {
		return nil
	}
	out := new(GcsMigration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexPatterns) DeepCopyInto(out *IndexPatterns) {
	*out = *in
	if in.SortingAlgorithm != nil {
		in, out := &in.SortingAlgorithm, &out.SortingAlgorithm
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexPatterns.
func (in *IndexPatterns) DeepCopy() *IndexPatterns {
	if in == nil {
		return nil
	}
	out := new(IndexPatterns)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexRollup) DeepCopyInto(out *IndexRollup) {
	*out = *in
	if in.RollupDashboardsEnabled != nil {
		in, out := &in.RollupDashboardsEnabled, &out.RollupDashboardsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RollupEnabled != nil {
		in, out := &in.RollupEnabled, &out.RollupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RollupSearchBackoffCount != nil {
		in, out := &in.RollupSearchBackoffCount, &out.RollupSearchBackoffCount
		*out = new(int)
		**out = **in
	}
	if in.RollupSearchBackoffMillis != nil {
		in, out := &in.RollupSearchBackoffMillis, &out.RollupSearchBackoffMillis
		*out = new(int)
		**out = **in
	}
	if in.RollupSearchSearchAllJobs != nil {
		in, out := &in.RollupSearchSearchAllJobs, &out.RollupSearchSearchAllJobs
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexRollup.
func (in *IndexRollup) DeepCopy() *IndexRollup {
	if in == nil {
		return nil
	}
	out := new(IndexRollup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexTemplate) DeepCopyInto(out *IndexTemplate) {
	*out = *in
	if in.MappingNestedObjectsLimit != nil {
		in, out := &in.MappingNestedObjectsLimit, &out.MappingNestedObjectsLimit
		*out = new(int)
		**out = **in
	}
	if in.NumberOfReplicas != nil {
		in, out := &in.NumberOfReplicas, &out.NumberOfReplicas
		*out = new(int)
		**out = **in
	}
	if in.NumberOfShards != nil {
		in, out := &in.NumberOfShards, &out.NumberOfShards
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexTemplate.
func (in *IndexTemplate) DeepCopy() *IndexTemplate {
	if in == nil {
		return nil
	}
	out := new(IndexTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalAuthenticationBackendLimiting) DeepCopyInto(out *InternalAuthenticationBackendLimiting) {
	*out = *in
	if in.AllowedTries != nil {
		in, out := &in.AllowedTries, &out.AllowedTries
		*out = new(int)
		**out = **in
	}
	if in.AuthenticationBackend != nil {
		in, out := &in.AuthenticationBackend, &out.AuthenticationBackend
		*out = new(string)
		**out = **in
	}
	if in.BlockExpirySeconds != nil {
		in, out := &in.BlockExpirySeconds, &out.BlockExpirySeconds
		*out = new(int)
		**out = **in
	}
	if in.MaxBlockedClients != nil {
		in, out := &in.MaxBlockedClients, &out.MaxBlockedClients
		*out = new(int)
		**out = **in
	}
	if in.MaxTrackedClients != nil {
		in, out := &in.MaxTrackedClients, &out.MaxTrackedClients
		*out = new(int)
		**out = **in
	}
	if in.TimeWindowSeconds != nil {
		in, out := &in.TimeWindowSeconds, &out.TimeWindowSeconds
		*out = new(int)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalAuthenticationBackendLimiting.
func (in *InternalAuthenticationBackendLimiting) DeepCopy() *InternalAuthenticationBackendLimiting {
	if in == nil {
		return nil
	}
	out := new(InternalAuthenticationBackendLimiting)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IpFilter) DeepCopyInto(out *IpFilter) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IpFilter.
func (in *IpFilter) DeepCopy() *IpFilter {
	if in == nil {
		return nil
	}
	out := new(IpFilter)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IpRateLimiting) DeepCopyInto(out *IpRateLimiting) {
	*out = *in
	if in.AllowedTries != nil {
		in, out := &in.AllowedTries, &out.AllowedTries
		*out = new(int)
		**out = **in
	}
	if in.BlockExpirySeconds != nil {
		in, out := &in.BlockExpirySeconds, &out.BlockExpirySeconds
		*out = new(int)
		**out = **in
	}
	if in.MaxBlockedClients != nil {
		in, out := &in.MaxBlockedClients, &out.MaxBlockedClients
		*out = new(int)
		**out = **in
	}
	if in.MaxTrackedClients != nil {
		in, out := &in.MaxTrackedClients, &out.MaxTrackedClients
		*out = new(int)
		**out = **in
	}
	if in.TimeWindowSeconds != nil {
		in, out := &in.TimeWindowSeconds, &out.TimeWindowSeconds
		*out = new(int)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IpRateLimiting.
func (in *IpRateLimiting) DeepCopy() *IpRateLimiting {
	if in == nil {
		return nil
	}
	out := new(IpRateLimiting)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Jwt) DeepCopyInto(out *Jwt) {
	*out = *in
	if in.JwtClockSkewToleranceSeconds != nil {
		in, out := &in.JwtClockSkewToleranceSeconds, &out.JwtClockSkewToleranceSeconds
		*out = new(int)
		**out = **in
	}
	if in.JwtHeader != nil {
		in, out := &in.JwtHeader, &out.JwtHeader
		*out = new(string)
		**out = **in
	}
	if in.JwtUrlParameter != nil {
		in, out := &in.JwtUrlParameter, &out.JwtUrlParameter
		*out = new(string)
		**out = **in
	}
	if in.RequiredAudience != nil {
		in, out := &in.RequiredAudience, &out.RequiredAudience
		*out = new(string)
		**out = **in
	}
	if in.RequiredIssuer != nil {
		in, out := &in.RequiredIssuer, &out.RequiredIssuer
		*out = new(string)
		**out = **in
	}
	if in.RolesKey != nil {
		in, out := &in.RolesKey, &out.RolesKey
		*out = new(string)
		**out = **in
	}
	if in.SubjectKey != nil {
		in, out := &in.SubjectKey, &out.SubjectKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Jwt.
func (in *Jwt) DeepCopy() *Jwt {
	if in == nil {
		return nil
	}
	out := new(Jwt)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Latency) DeepCopyInto(out *Latency) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.TopNSize != nil {
		in, out := &in.TopNSize, &out.TopNSize
		*out = new(int)
		**out = **in
	}
	if in.WindowSize != nil {
		in, out := &in.WindowSize, &out.WindowSize
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Latency.
func (in *Latency) DeepCopy() *Latency {
	if in == nil {
		return nil
	}
	out := new(Latency)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Memory) DeepCopyInto(out *Memory) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.TopNSize != nil {
		in, out := &in.TopNSize, &out.TopNSize
		*out = new(int)
		**out = **in
	}
	if in.WindowSize != nil {
		in, out := &in.WindowSize, &out.WindowSize
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Memory.
func (in *Memory) DeepCopy() *Memory {
	if in == nil {
		return nil
	}
	out := new(Memory)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Node) DeepCopyInto(out *Node) {
	*out = *in
	if in.SoftLimit != nil {
		in, out := &in.SoftLimit, &out.SoftLimit
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Node.
func (in *Node) DeepCopy() *Node {
	if in == nil {
		return nil
	}
	out := new(Node)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeDuress) DeepCopyInto(out *NodeDuress) {
	*out = *in
	if in.CpuThreshold != nil {
		in, out := &in.CpuThreshold, &out.CpuThreshold
		*out = new(float64)
		**out = **in
	}
	if in.HeapThreshold != nil {
		in, out := &in.HeapThreshold, &out.HeapThreshold
		*out = new(float64)
		**out = **in
	}
	if in.NumSuccessiveBreaches != nil {
		in, out := &in.NumSuccessiveBreaches, &out.NumSuccessiveBreaches
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeDuress.
func (in *NodeDuress) DeepCopy() *NodeDuress {
	if in == nil {
		return nil
	}
	out := new(NodeDuress)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Openid) DeepCopyInto(out *Openid) {
	*out = *in
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(string)
		**out = **in
	}
	if in.JwtHeader != nil {
		in, out := &in.JwtHeader, &out.JwtHeader
		*out = new(string)
		**out = **in
	}
	if in.JwtUrlParameter != nil {
		in, out := &in.JwtUrlParameter, &out.JwtUrlParameter
		*out = new(string)
		**out = **in
	}
	if in.RefreshRateLimitCount != nil {
		in, out := &in.RefreshRateLimitCount, &out.RefreshRateLimitCount
		*out = new(int)
		**out = **in
	}
	if in.RefreshRateLimitTimeWindowMs != nil {
		in, out := &in.RefreshRateLimitTimeWindowMs, &out.RefreshRateLimitTimeWindowMs
		*out = new(int)
		**out = **in
	}
	if in.RolesKey != nil {
		in, out := &in.RolesKey, &out.RolesKey
		*out = new(string)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = new(string)
		**out = **in
	}
	if in.SubjectKey != nil {
		in, out := &in.SubjectKey, &out.SubjectKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Openid.
func (in *Openid) DeepCopy() *Openid {
	if in == nil {
		return nil
	}
	out := new(Openid)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Opensearch) DeepCopyInto(out *Opensearch) {
	*out = *in
	if in.ActionAutoCreateIndexEnabled != nil {
		in, out := &in.ActionAutoCreateIndexEnabled, &out.ActionAutoCreateIndexEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ActionDestructiveRequiresName != nil {
		in, out := &in.ActionDestructiveRequiresName, &out.ActionDestructiveRequiresName
		*out = new(bool)
		**out = **in
	}
	if in.AuthFailureListeners != nil {
		in, out := &in.AuthFailureListeners, &out.AuthFailureListeners
		*out = new(AuthFailureListeners)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterFilecacheRemoteDataRatio != nil {
		in, out := &in.ClusterFilecacheRemoteDataRatio, &out.ClusterFilecacheRemoteDataRatio
		*out = new(float64)
		**out = **in
	}
	if in.ClusterRemoteStore != nil {
		in, out := &in.ClusterRemoteStore, &out.ClusterRemoteStore
		*out = new(ClusterRemoteStore)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterRoutingAllocationBalancePreferPrimary != nil {
		in, out := &in.ClusterRoutingAllocationBalancePreferPrimary, &out.ClusterRoutingAllocationBalancePreferPrimary
		*out = new(bool)
		**out = **in
	}
	if in.ClusterSearchRequestSlowlog != nil {
		in, out := &in.ClusterSearchRequestSlowlog, &out.ClusterSearchRequestSlowlog
		*out = new(ClusterSearchRequestSlowlog)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterMaxShardsPerNode != nil {
		in, out := &in.ClusterMaxShardsPerNode, &out.ClusterMaxShardsPerNode
		*out = new(int)
		**out = **in
	}
	if in.ClusterRoutingAllocationNodeConcurrentRecoveries != nil {
		in, out := &in.ClusterRoutingAllocationNodeConcurrentRecoveries, &out.ClusterRoutingAllocationNodeConcurrentRecoveries
		*out = new(int)
		**out = **in
	}
	if in.DiskWatermarks != nil {
		in, out := &in.DiskWatermarks, &out.DiskWatermarks
		*out = new(DiskWatermarks)
		**out = **in
	}
	if in.EmailSenderName != nil {
		in, out := &in.EmailSenderName, &out.EmailSenderName
		*out = new(string)
		**out = **in
	}
	if in.EmailSenderPassword != nil {
		in, out := &in.EmailSenderPassword, &out.EmailSenderPassword
		*out = new(string)
		**out = **in
	}
	if in.EmailSenderUsername != nil {
		in, out := &in.EmailSenderUsername, &out.EmailSenderUsername
		*out = new(string)
		**out = **in
	}
	if in.EnableRemoteBackedStorage != nil {
		in, out := &in.EnableRemoteBackedStorage, &out.EnableRemoteBackedStorage
		*out = new(bool)
		**out = **in
	}
	if in.EnableSearchableSnapshots != nil {
		in, out := &in.EnableSearchableSnapshots, &out.EnableSearchableSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.EnableSecurityAudit != nil {
		in, out := &in.EnableSecurityAudit, &out.EnableSecurityAudit
		*out = new(bool)
		**out = **in
	}
	if in.EnableSnapshotApi != nil {
		in, out := &in.EnableSnapshotApi, &out.EnableSnapshotApi
		*out = new(bool)
		**out = **in
	}
	if in.HttpMaxContentLength != nil {
		in, out := &in.HttpMaxContentLength, &out.HttpMaxContentLength
		*out = new(int)
		**out = **in
	}
	if in.HttpMaxHeaderSize != nil {
		in, out := &in.HttpMaxHeaderSize, &out.HttpMaxHeaderSize
		*out = new(int)
		**out = **in
	}
	if in.HttpMaxInitialLineLength != nil {
		in, out := &in.HttpMaxInitialLineLength, &out.HttpMaxInitialLineLength
		*out = new(int)
		**out = **in
	}
	if in.IndicesFielddataCacheSize != nil {
		in, out := &in.IndicesFielddataCacheSize, &out.IndicesFielddataCacheSize
		*out = new(int)
		**out = **in
	}
	if in.IndicesMemoryIndexBufferSize != nil {
		in, out := &in.IndicesMemoryIndexBufferSize, &out.IndicesMemoryIndexBufferSize
		*out = new(int)
		**out = **in
	}
	if in.IndicesMemoryMaxIndexBufferSize != nil {
		in, out := &in.IndicesMemoryMaxIndexBufferSize, &out.IndicesMemoryMaxIndexBufferSize
		*out = new(int)
		**out = **in
	}
	if in.IndicesMemoryMinIndexBufferSize != nil {
		in, out := &in.IndicesMemoryMinIndexBufferSize, &out.IndicesMemoryMinIndexBufferSize
		*out = new(int)
		**out = **in
	}
	if in.IndicesQueriesCacheSize != nil {
		in, out := &in.IndicesQueriesCacheSize, &out.IndicesQueriesCacheSize
		*out = new(int)
		**out = **in
	}
	if in.IndicesQueryBoolMaxClauseCount != nil {
		in, out := &in.IndicesQueryBoolMaxClauseCount, &out.IndicesQueryBoolMaxClauseCount
		*out = new(int)
		**out = **in
	}
	if in.IndicesRecoveryMaxBytesPerSec != nil {
		in, out := &in.IndicesRecoveryMaxBytesPerSec, &out.IndicesRecoveryMaxBytesPerSec
		*out = new(int)
		**out = **in
	}
	if in.IndicesRecoveryMaxConcurrentFileChunks != nil {
		in, out := &in.IndicesRecoveryMaxConcurrentFileChunks, &out.IndicesRecoveryMaxConcurrentFileChunks
		*out = new(int)
		**out = **in
	}
	if in.IsmEnabled != nil {
		in, out := &in.IsmEnabled, &out.IsmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsmHistoryEnabled != nil {
		in, out := &in.IsmHistoryEnabled, &out.IsmHistoryEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsmHistoryMaxAge != nil {
		in, out := &in.IsmHistoryMaxAge, &out.IsmHistoryMaxAge
		*out = new(int)
		**out = **in
	}
	if in.IsmHistoryMaxDocs != nil {
		in, out := &in.IsmHistoryMaxDocs, &out.IsmHistoryMaxDocs
		*out = new(int)
		**out = **in
	}
	if in.IsmHistoryRolloverCheckPeriod != nil {
		in, out := &in.IsmHistoryRolloverCheckPeriod, &out.IsmHistoryRolloverCheckPeriod
		*out = new(int)
		**out = **in
	}
	if in.IsmHistoryRolloverRetentionPeriod != nil {
		in, out := &in.IsmHistoryRolloverRetentionPeriod, &out.IsmHistoryRolloverRetentionPeriod
		*out = new(int)
		**out = **in
	}
	if in.KnnMemoryCircuitBreakerEnabled != nil {
		in, out := &in.KnnMemoryCircuitBreakerEnabled, &out.KnnMemoryCircuitBreakerEnabled
		*out = new(bool)
		**out = **in
	}
	if in.KnnMemoryCircuitBreakerLimit != nil {
		in, out := &in.KnnMemoryCircuitBreakerLimit, &out.KnnMemoryCircuitBreakerLimit
		*out = new(int)
		**out = **in
	}
	if in.NodeSearchCacheSize != nil {
		in, out := &in.NodeSearchCacheSize, &out.NodeSearchCacheSize
		*out = new(string)
		**out = **in
	}
	if in.OverrideMainResponseVersion != nil {
		in, out := &in.OverrideMainResponseVersion, &out.OverrideMainResponseVersion
		*out = new(bool)
		**out = **in
	}
	if in.PluginsAlertingFilterByBackendRoles != nil {
		in, out := &in.PluginsAlertingFilterByBackendRoles, &out.PluginsAlertingFilterByBackendRoles
		*out = new(bool)
		**out = **in
	}
	if in.ReindexRemoteWhitelist != nil {
		in, out := &in.ReindexRemoteWhitelist, &out.ReindexRemoteWhitelist
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RemoteStore != nil {
		in, out := &in.RemoteStore, &out.RemoteStore
		*out = new(RemoteStore)
		(*in).DeepCopyInto(*out)
	}
	if in.ScriptMaxCompilationsRate != nil {
		in, out := &in.ScriptMaxCompilationsRate, &out.ScriptMaxCompilationsRate
		*out = new(string)
		**out = **in
	}
	if in.SearchInsightsTopQueries != nil {
		in, out := &in.SearchInsightsTopQueries, &out.SearchInsightsTopQueries
		*out = new(SearchInsightsTopQueries)
		(*in).DeepCopyInto(*out)
	}
	if in.SearchBackpressure != nil {
		in, out := &in.SearchBackpressure, &out.SearchBackpressure
		*out = new(SearchBackpressure)
		(*in).DeepCopyInto(*out)
	}
	if in.SearchMaxBuckets != nil {
		in, out := &in.SearchMaxBuckets, &out.SearchMaxBuckets
		*out = new(int)
		**out = **in
	}
	if in.Segrep != nil {
		in, out := &in.Segrep, &out.Segrep
		*out = new(Segrep)
		(*in).DeepCopyInto(*out)
	}
	if in.ShardIndexingPressure != nil {
		in, out := &in.ShardIndexingPressure, &out.ShardIndexingPressure
		*out = new(ShardIndexingPressure)
		(*in).DeepCopyInto(*out)
	}
	if in.ThreadPoolAnalyzeQueueSize != nil {
		in, out := &in.ThreadPoolAnalyzeQueueSize, &out.ThreadPoolAnalyzeQueueSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolAnalyzeSize != nil {
		in, out := &in.ThreadPoolAnalyzeSize, &out.ThreadPoolAnalyzeSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolForceMergeSize != nil {
		in, out := &in.ThreadPoolForceMergeSize, &out.ThreadPoolForceMergeSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolGetQueueSize != nil {
		in, out := &in.ThreadPoolGetQueueSize, &out.ThreadPoolGetQueueSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolGetSize != nil {
		in, out := &in.ThreadPoolGetSize, &out.ThreadPoolGetSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolSearchQueueSize != nil {
		in, out := &in.ThreadPoolSearchQueueSize, &out.ThreadPoolSearchQueueSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolSearchSize != nil {
		in, out := &in.ThreadPoolSearchSize, &out.ThreadPoolSearchSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolSearchThrottledQueueSize != nil {
		in, out := &in.ThreadPoolSearchThrottledQueueSize, &out.ThreadPoolSearchThrottledQueueSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolSearchThrottledSize != nil {
		in, out := &in.ThreadPoolSearchThrottledSize, &out.ThreadPoolSearchThrottledSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolWriteQueueSize != nil {
		in, out := &in.ThreadPoolWriteQueueSize, &out.ThreadPoolWriteQueueSize
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolWriteSize != nil {
		in, out := &in.ThreadPoolWriteSize, &out.ThreadPoolWriteSize
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Opensearch.
func (in *Opensearch) DeepCopy() *Opensearch {
	if in == nil {
		return nil
	}
	out := new(Opensearch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchDashboards) DeepCopyInto(out *OpensearchDashboards) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxOldSpaceSize != nil {
		in, out := &in.MaxOldSpaceSize, &out.MaxOldSpaceSize
		*out = new(int)
		**out = **in
	}
	if in.MultipleDataSourceEnabled != nil {
		in, out := &in.MultipleDataSourceEnabled, &out.MultipleDataSourceEnabled
		*out = new(bool)
		**out = **in
	}
	if in.OpensearchRequestTimeout != nil {
		in, out := &in.OpensearchRequestTimeout, &out.OpensearchRequestTimeout
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchDashboards.
func (in *OpensearchDashboards) DeepCopy() *OpensearchDashboards {
	if in == nil {
		return nil
	}
	out := new(OpensearchDashboards)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchUserConfig) DeepCopyInto(out *OpensearchUserConfig) {
	*out = *in
	if in.AdditionalBackupRegions != nil {
		in, out := &in.AdditionalBackupRegions, &out.AdditionalBackupRegions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.AzureMigration != nil {
		in, out := &in.AzureMigration, &out.AzureMigration
		*out = new(AzureMigration)
		(*in).DeepCopyInto(*out)
	}
	if in.CustomDomain != nil {
		in, out := &in.CustomDomain, &out.CustomDomain
		*out = new(string)
		**out = **in
	}
	if in.DisableReplicationFactorAdjustment != nil {
		in, out := &in.DisableReplicationFactorAdjustment, &out.DisableReplicationFactorAdjustment
		*out = new(bool)
		**out = **in
	}
	if in.GcsMigration != nil {
		in, out := &in.GcsMigration, &out.GcsMigration
		*out = new(GcsMigration)
		(*in).DeepCopyInto(*out)
	}
	if in.IndexPatterns != nil {
		in, out := &in.IndexPatterns, &out.IndexPatterns
		*out = make([]*IndexPatterns, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(IndexPatterns)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	if in.IndexRollup != nil {
		in, out := &in.IndexRollup, &out.IndexRollup
		*out = new(IndexRollup)
		(*in).DeepCopyInto(*out)
	}
	if in.IndexTemplate != nil {
		in, out := &in.IndexTemplate, &out.IndexTemplate
		*out = new(IndexTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.IpFilter != nil {
		in, out := &in.IpFilter, &out.IpFilter
		*out = make([]*IpFilter, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(IpFilter)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	if in.Jwt != nil {
		in, out := &in.Jwt, &out.Jwt
		*out = new(Jwt)
		(*in).DeepCopyInto(*out)
	}
	if in.KeepIndexRefreshInterval != nil {
		in, out := &in.KeepIndexRefreshInterval, &out.KeepIndexRefreshInterval
		*out = new(bool)
		**out = **in
	}
	if in.MaxIndexCount != nil {
		in, out := &in.MaxIndexCount, &out.MaxIndexCount
		*out = new(int)
		**out = **in
	}
	if in.Openid != nil {
		in, out := &in.Openid, &out.Openid
		*out = new(Openid)
		(*in).DeepCopyInto(*out)
	}
	if in.Opensearch != nil {
		in, out := &in.Opensearch, &out.Opensearch
		*out = new(Opensearch)
		(*in).DeepCopyInto(*out)
	}
	if in.OpensearchDashboards != nil {
		in, out := &in.OpensearchDashboards, &out.OpensearchDashboards
		*out = new(OpensearchDashboards)
		(*in).DeepCopyInto(*out)
	}
	if in.OpensearchVersion != nil {
		in, out := &in.OpensearchVersion, &out.OpensearchVersion
		*out = new(string)
		**out = **in
	}
	if in.PrivateAccess != nil {
		in, out := &in.PrivateAccess, &out.PrivateAccess
		*out = new(PrivateAccess)
		(*in).DeepCopyInto(*out)
	}
	if in.PrivatelinkAccess != nil {
		in, out := &in.PrivatelinkAccess, &out.PrivatelinkAccess
		*out = new(PrivatelinkAccess)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectToForkFrom != nil {
		in, out := &in.ProjectToForkFrom, &out.ProjectToForkFrom
		*out = new(string)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(PublicAccess)
		(*in).DeepCopyInto(*out)
	}
	if in.RecoveryBasebackupName != nil {
		in, out := &in.RecoveryBasebackupName, &out.RecoveryBasebackupName
		*out = new(string)
		**out = **in
	}
	if in.S3Migration != nil {
		in, out := &in.S3Migration, &out.S3Migration
		*out = new(S3Migration)
		(*in).DeepCopyInto(*out)
	}
	if in.Saml != nil {
		in, out := &in.Saml, &out.Saml
		*out = new(Saml)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.ServiceToForkFrom != nil {
		in, out := &in.ServiceToForkFrom, &out.ServiceToForkFrom
		*out = new(string)
		**out = **in
	}
	if in.StaticIps != nil {
		in, out := &in.StaticIps, &out.StaticIps
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchUserConfig.
func (in *OpensearchUserConfig) DeepCopy() *OpensearchUserConfig {
	if in == nil {
		return nil
	}
	out := new(OpensearchUserConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperatingFactor) DeepCopyInto(out *OperatingFactor) {
	*out = *in
	if in.Lower != nil {
		in, out := &in.Lower, &out.Lower
		*out = new(float64)
		**out = **in
	}
	if in.Optimal != nil {
		in, out := &in.Optimal, &out.Optimal
		*out = new(float64)
		**out = **in
	}
	if in.Upper != nil {
		in, out := &in.Upper, &out.Upper
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperatingFactor.
func (in *OperatingFactor) DeepCopy() *OperatingFactor {
	if in == nil {
		return nil
	}
	out := new(OperatingFactor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryParameter) DeepCopyInto(out *PrimaryParameter) {
	*out = *in
	if in.Node != nil {
		in, out := &in.Node, &out.Node
		*out = new(Node)
		(*in).DeepCopyInto(*out)
	}
	if in.Shard != nil {
		in, out := &in.Shard, &out.Shard
		*out = new(Shard)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryParameter.
func (in *PrimaryParameter) DeepCopy() *PrimaryParameter {
	if in == nil {
		return nil
	}
	out := new(PrimaryParameter)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateAccess) DeepCopyInto(out *PrivateAccess) {
	*out = *in
	if in.Opensearch != nil {
		in, out := &in.Opensearch, &out.Opensearch
		*out = new(bool)
		**out = **in
	}
	if in.OpensearchDashboards != nil {
		in, out := &in.OpensearchDashboards, &out.OpensearchDashboards
		*out = new(bool)
		**out = **in
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateAccess.
func (in *PrivateAccess) DeepCopy() *PrivateAccess {
	if in == nil {
		return nil
	}
	out := new(PrivateAccess)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivatelinkAccess) DeepCopyInto(out *PrivatelinkAccess) {
	*out = *in
	if in.Opensearch != nil {
		in, out := &in.Opensearch, &out.Opensearch
		*out = new(bool)
		**out = **in
	}
	if in.OpensearchDashboards != nil {
		in, out := &in.OpensearchDashboards, &out.OpensearchDashboards
		*out = new(bool)
		**out = **in
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivatelinkAccess.
func (in *PrivatelinkAccess) DeepCopy() *PrivatelinkAccess {
	if in == nil {
		return nil
	}
	out := new(PrivatelinkAccess)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicAccess) DeepCopyInto(out *PublicAccess) {
	*out = *in
	if in.Opensearch != nil {
		in, out := &in.Opensearch, &out.Opensearch
		*out = new(bool)
		**out = **in
	}
	if in.OpensearchDashboards != nil {
		in, out := &in.OpensearchDashboards, &out.OpensearchDashboards
		*out = new(bool)
		**out = **in
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicAccess.
func (in *PublicAccess) DeepCopy() *PublicAccess {
	if in == nil {
		return nil
	}
	out := new(PublicAccess)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteStore) DeepCopyInto(out *RemoteStore) {
	*out = *in
	if in.SegmentPressureBytesLagVarianceFactor != nil {
		in, out := &in.SegmentPressureBytesLagVarianceFactor, &out.SegmentPressureBytesLagVarianceFactor
		*out = new(float64)
		**out = **in
	}
	if in.SegmentPressureConsecutiveFailuresLimit != nil {
		in, out := &in.SegmentPressureConsecutiveFailuresLimit, &out.SegmentPressureConsecutiveFailuresLimit
		*out = new(int)
		**out = **in
	}
	if in.SegmentPressureEnabled != nil {
		in, out := &in.SegmentPressureEnabled, &out.SegmentPressureEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SegmentPressureTimeLagVarianceFactor != nil {
		in, out := &in.SegmentPressureTimeLagVarianceFactor, &out.SegmentPressureTimeLagVarianceFactor
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteStore.
func (in *RemoteStore) DeepCopy() *RemoteStore {
	if in == nil {
		return nil
	}
	out := new(RemoteStore)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3Migration) DeepCopyInto(out *S3Migration) {
	*out = *in
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.IncludeAliases != nil {
		in, out := &in.IncludeAliases, &out.IncludeAliases
		*out = new(bool)
		**out = **in
	}
	if in.Readonly != nil {
		in, out := &in.Readonly, &out.Readonly
		*out = new(bool)
		**out = **in
	}
	if in.RestoreGlobalState != nil {
		in, out := &in.RestoreGlobalState, &out.RestoreGlobalState
		*out = new(bool)
		**out = **in
	}
	if in.ServerSideEncryption != nil {
		in, out := &in.ServerSideEncryption, &out.ServerSideEncryption
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3Migration.
func (in *S3Migration) DeepCopy() *S3Migration {
	if in == nil {
		return nil
	}
	out := new(S3Migration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Saml) DeepCopyInto(out *Saml) {
	*out = *in
	if in.IdpPemtrustedcasContent != nil {
		in, out := &in.IdpPemtrustedcasContent, &out.IdpPemtrustedcasContent
		*out = new(string)
		**out = **in
	}
	if in.RolesKey != nil {
		in, out := &in.RolesKey, &out.RolesKey
		*out = new(string)
		**out = **in
	}
	if in.SubjectKey != nil {
		in, out := &in.SubjectKey, &out.SubjectKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Saml.
func (in *Saml) DeepCopy() *Saml {
	if in == nil {
		return nil
	}
	out := new(Saml)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SearchBackpressure) DeepCopyInto(out *SearchBackpressure) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.NodeDuress != nil {
		in, out := &in.NodeDuress, &out.NodeDuress
		*out = new(NodeDuress)
		(*in).DeepCopyInto(*out)
	}
	if in.SearchShardTask != nil {
		in, out := &in.SearchShardTask, &out.SearchShardTask
		*out = new(SearchShardTask)
		(*in).DeepCopyInto(*out)
	}
	if in.SearchTask != nil {
		in, out := &in.SearchTask, &out.SearchTask
		*out = new(SearchTask)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SearchBackpressure.
func (in *SearchBackpressure) DeepCopy() *SearchBackpressure {
	if in == nil {
		return nil
	}
	out := new(SearchBackpressure)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SearchInsightsTopQueries) DeepCopyInto(out *SearchInsightsTopQueries) {
	*out = *in
	if in.Cpu != nil {
		in, out := &in.Cpu, &out.Cpu
		*out = new(Cpu)
		(*in).DeepCopyInto(*out)
	}
	if in.Latency != nil {
		in, out := &in.Latency, &out.Latency
		*out = new(Latency)
		(*in).DeepCopyInto(*out)
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(Memory)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SearchInsightsTopQueries.
func (in *SearchInsightsTopQueries) DeepCopy() *SearchInsightsTopQueries {
	if in == nil {
		return nil
	}
	out := new(SearchInsightsTopQueries)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SearchShardTask) DeepCopyInto(out *SearchShardTask) {
	*out = *in
	if in.CancellationBurst != nil {
		in, out := &in.CancellationBurst, &out.CancellationBurst
		*out = new(float64)
		**out = **in
	}
	if in.CancellationRate != nil {
		in, out := &in.CancellationRate, &out.CancellationRate
		*out = new(float64)
		**out = **in
	}
	if in.CancellationRatio != nil {
		in, out := &in.CancellationRatio, &out.CancellationRatio
		*out = new(float64)
		**out = **in
	}
	if in.CpuTimeMillisThreshold != nil {
		in, out := &in.CpuTimeMillisThreshold, &out.CpuTimeMillisThreshold
		*out = new(int)
		**out = **in
	}
	if in.ElapsedTimeMillisThreshold != nil {
		in, out := &in.ElapsedTimeMillisThreshold, &out.ElapsedTimeMillisThreshold
		*out = new(int)
		**out = **in
	}
	if in.HeapMovingAverageWindowSize != nil {
		in, out := &in.HeapMovingAverageWindowSize, &out.HeapMovingAverageWindowSize
		*out = new(int)
		**out = **in
	}
	if in.HeapPercentThreshold != nil {
		in, out := &in.HeapPercentThreshold, &out.HeapPercentThreshold
		*out = new(float64)
		**out = **in
	}
	if in.HeapVariance != nil {
		in, out := &in.HeapVariance, &out.HeapVariance
		*out = new(float64)
		**out = **in
	}
	if in.TotalHeapPercentThreshold != nil {
		in, out := &in.TotalHeapPercentThreshold, &out.TotalHeapPercentThreshold
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SearchShardTask.
func (in *SearchShardTask) DeepCopy() *SearchShardTask {
	if in == nil {
		return nil
	}
	out := new(SearchShardTask)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SearchTask) DeepCopyInto(out *SearchTask) {
	*out = *in
	if in.CancellationBurst != nil {
		in, out := &in.CancellationBurst, &out.CancellationBurst
		*out = new(float64)
		**out = **in
	}
	if in.CancellationRate != nil {
		in, out := &in.CancellationRate, &out.CancellationRate
		*out = new(float64)
		**out = **in
	}
	if in.CancellationRatio != nil {
		in, out := &in.CancellationRatio, &out.CancellationRatio
		*out = new(float64)
		**out = **in
	}
	if in.CpuTimeMillisThreshold != nil {
		in, out := &in.CpuTimeMillisThreshold, &out.CpuTimeMillisThreshold
		*out = new(int)
		**out = **in
	}
	if in.ElapsedTimeMillisThreshold != nil {
		in, out := &in.ElapsedTimeMillisThreshold, &out.ElapsedTimeMillisThreshold
		*out = new(int)
		**out = **in
	}
	if in.HeapMovingAverageWindowSize != nil {
		in, out := &in.HeapMovingAverageWindowSize, &out.HeapMovingAverageWindowSize
		*out = new(int)
		**out = **in
	}
	if in.HeapPercentThreshold != nil {
		in, out := &in.HeapPercentThreshold, &out.HeapPercentThreshold
		*out = new(float64)
		**out = **in
	}
	if in.HeapVariance != nil {
		in, out := &in.HeapVariance, &out.HeapVariance
		*out = new(float64)
		**out = **in
	}
	if in.TotalHeapPercentThreshold != nil {
		in, out := &in.TotalHeapPercentThreshold, &out.TotalHeapPercentThreshold
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SearchTask.
func (in *SearchTask) DeepCopy() *SearchTask {
	if in == nil {
		return nil
	}
	out := new(SearchTask)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Segrep) DeepCopyInto(out *Segrep) {
	*out = *in
	if in.PressureCheckpointLimit != nil {
		in, out := &in.PressureCheckpointLimit, &out.PressureCheckpointLimit
		*out = new(int)
		**out = **in
	}
	if in.PressureEnabled != nil {
		in, out := &in.PressureEnabled, &out.PressureEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PressureReplicaStaleLimit != nil {
		in, out := &in.PressureReplicaStaleLimit, &out.PressureReplicaStaleLimit
		*out = new(float64)
		**out = **in
	}
	if in.PressureTimeLimit != nil {
		in, out := &in.PressureTimeLimit, &out.PressureTimeLimit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Segrep.
func (in *Segrep) DeepCopy() *Segrep {
	if in == nil {
		return nil
	}
	out := new(Segrep)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Shard) DeepCopyInto(out *Shard) {
	*out = *in
	if in.MinLimit != nil {
		in, out := &in.MinLimit, &out.MinLimit
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Shard.
func (in *Shard) DeepCopy() *Shard {
	if in == nil {
		return nil
	}
	out := new(Shard)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardIndexingPressure) DeepCopyInto(out *ShardIndexingPressure) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Enforced != nil {
		in, out := &in.Enforced, &out.Enforced
		*out = new(bool)
		**out = **in
	}
	if in.OperatingFactor != nil {
		in, out := &in.OperatingFactor, &out.OperatingFactor
		*out = new(OperatingFactor)
		(*in).DeepCopyInto(*out)
	}
	if in.PrimaryParameter != nil {
		in, out := &in.PrimaryParameter, &out.PrimaryParameter
		*out = new(PrimaryParameter)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardIndexingPressure.
func (in *ShardIndexingPressure) DeepCopy() *ShardIndexingPressure {
	if in == nil {
		return nil
	}
	out := new(ShardIndexingPressure)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Threshold) DeepCopyInto(out *Threshold) {
	*out = *in
	if in.Debug != nil {
		in, out := &in.Debug, &out.Debug
		*out = new(string)
		**out = **in
	}
	if in.Info != nil {
		in, out := &in.Info, &out.Info
		*out = new(string)
		**out = **in
	}
	if in.Trace != nil {
		in, out := &in.Trace, &out.Trace
		*out = new(string)
		**out = **in
	}
	if in.Warn != nil {
		in, out := &in.Warn, &out.Warn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Threshold.
func (in *Threshold) DeepCopy() *Threshold {
	if in == nil {
		return nil
	}
	out := new(Threshold)
	in.DeepCopyInto(out)
	return out
}
